"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = require("xstream");
function createHistory$(history, sink$) {
    var history$ = xstream_1.default.createWithMemory().startWith(history.location);
    var call = makeCallOnHistory(history);
    var unlisten = history.listen(function (_a) {
        var location = _a.location;
        history$._n(location);
    });
    var sub = sink$.subscribe(createObserver(call, unlisten));
    history$.dispose = function () {
        sub.unsubscribe();
        unlisten();
    };
    return history$;
}
exports.createHistory$ = createHistory$;
function makeCallOnHistory(history) {
    return function call(input) {
        if (input.type === 'push') {
            history.push(__assign({}, input));
        }
        if (input.type === 'replace') {
            history.replace(__assign({}, input));
        }
        if (input.type === 'go') {
            history.go(input.amount);
        }
        if (input.type === 'goBack') {
            history.back();
        }
        if (input.type === 'goForward') {
            history.forward();
        }
    };
}
function createObserver(call, unlisten) {
    return {
        next: function (input) {
            if (typeof input === 'string') {
                call({ type: 'push', pathname: input });
            }
            else {
                call(input);
            }
        },
        error: function (err) {
            unlisten();
        },
        complete: function () {
            setTimeout(unlisten);
        },
    };
}
//# sourceMappingURL=createHistory$.js.map