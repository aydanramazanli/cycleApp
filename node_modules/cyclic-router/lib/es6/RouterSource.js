var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as util from './util';
import { adapt } from '@cycle/run/lib/adapt';
function isStrictlyInScope(namespace, path) {
    var pathParts = util.splitPath(path);
    return namespace.every(function (v, i) {
        return pathParts[i] === v;
    });
}
function getFilteredPath(namespace, path) {
    var pathParts = util.splitPath(path);
    return '/' + util.filterPath(pathParts, namespace);
}
var RouterSource = /** @class */ (function () {
    function RouterSource(_history$, _namespace, _createHref, _routeMatcher, _name) {
        this._history$ = _history$;
        this._namespace = _namespace;
        this._createHref = _createHref;
        this._routeMatcher = _routeMatcher;
        this._name = _name;
        this.history$ = adapt(this._history$);
    }
    RouterSource.prototype.path = function (pathname) {
        var scopedNamespace = this._namespace.concat(util.splitPath(pathname));
        var scopedHistory$ = this._history$
            .filter(function (_a) {
            var _path = _a.pathname;
            return isStrictlyInScope(scopedNamespace, _path);
        })
            .remember();
        var createHref = this._createHref;
        return new RouterSource(scopedHistory$, scopedNamespace, createHref, this._routeMatcher, this._name);
    };
    RouterSource.prototype._define = function (routes, routeMatcher) {
        var _this = this;
        var namespace = this._namespace;
        var _createHref = this._createHref;
        var createHref = util.makeCreateHref(namespace, _createHref);
        return this._history$
            .map(function (location) {
            var matcher = routeMatcher || _this._routeMatcher;
            var filteredPath = getFilteredPath(namespace, location.pathname);
            var _a = matcher(filteredPath, routes), path = _a.path, value = _a.value;
            return { path: path, value: value, location: location, createHref: createHref };
        })
            .filter(function (_a) {
            var path = _a.path;
            return path !== undefined && path !== null;
        })
            .remember();
    };
    RouterSource.prototype.define = function (routes, routeMatcher) {
        var _createHref = this._createHref;
        var createHref = util.makeCreateHref(this._namespace, _createHref);
        var out$ = adapt(this._define(routes, routeMatcher));
        out$.createHref = createHref;
        return out$;
    };
    RouterSource.prototype.routedComponent = function (routes, routeMatcher) {
        var _this = this;
        var name = this._name;
        return function (sources) {
            var match$ = _this._define(routes, routeMatcher);
            var page$ = match$.map(function (_a) {
                var path = _a.path, value = _a.value;
                var _b;
                return value(__assign({}, sources, (_b = {}, _b[name] = sources[name].path(path), _b)));
            });
            return adapt(page$);
        };
    };
    RouterSource.prototype.createHref = function (path) {
        return util.makeCreateHref(this._namespace, this._createHref)(path);
    };
    return RouterSource;
}());
export { RouterSource };
//# sourceMappingURL=RouterSource.js.map